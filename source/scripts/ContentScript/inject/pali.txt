const proxy = (type, data) =>
  new Promise((resolve, reject) => {
    const id = Date.now() + '.' + Math.random();

    window.addEventListener(
      id,
      (event) => {
        if (!event.detail) {
          resolve(undefined);

          return;
        }

        const response = JSON.parse(event.detail);

        if (response.error) {
          reject(new Error(response.error));

          return;
        }

        resolve(response);
      },
      {
        once: true,
        passive: true,
      }
    );

    window.postMessage(
      {
        id,
        type,
        data,
      },
      '*'
    );
  });

const request = async (req) => {
  console.log('[Pali] Requesting method', req);

  const response = await proxy('METHOD_REQUEST', req);
  console.log('[Pali] Response', response);

  return response;
};

const on = (method, callback) => {
  let origin = window.location.host;

  const id = `${origin}.${method}`;

  window.pali._listeners[id] = ({ detail }) => {
    callback(JSON.parse(detail));
  };

  window.addEventListener(id, window.pali._listeners[id], {
    passive: true,
  });

  window.postMessage(
    {
      id: id,
      type: 'PALI_EVENT_REG',
      data: {
        method,
        origin,
      },
    },
    '*'
  );
};

const removeListener = (method) => {
  let origin = window.location.host;

  const id = `${origin}.${method}`;

  if (window.pali._listeners[id]) {
    window.removeEventListener(id, window.pali._listeners[id]);

    delete window.pali._listeners[id];
  }

  window.postMessage(
    {
      id,
      type: 'PALI_EVENT_DEREG',
      data: {
        method,
        origin,
      },
    },
    '*'
  );
};

window.pali = Object.freeze({
  version: 2,
  request,
  on,
  removeListener,
  isConnected: () => request({ method: 'wallet_isConnected' }),
  enable: () =>
    proxy('ENABLE_REQUEST', {
      chain: 'syscoin',
      network: 'main',
    }),
  disable: () =>
    proxy('DISABLE_REQUEST', {
      chain: 'syscoin',
      network: 'main',
    }),
  _listeners: {},
});
