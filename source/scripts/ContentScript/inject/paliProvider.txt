const ERRORS = {
  USER_REJECTED: new Error('User rejected the request'),
  INVALID_METHOD: new Error('Invalid method'),
};

const request = async (req) => {
  console.log('handling request', req);

  const [prefix, method] = req.method.split('_');

  const response = await window.providerManager.proxy('CAL_REQUEST', req);
  console.log('response', response);

  if (response.result === false) throw ERRORS.USER_REJECTED;
  else return response;
};

const on = (method, callback) => {
  let origin = window.location.hostname;
  if (window.location.port) {
    origin += `:${window.location.port}`;
  }

  const id = `${origin}.${method}`;

  window.pali._listeners[id] = ({ detail }) => {
    if (detail) {
      callback(JSON.parse(detail));
    }
  };

  window.addEventListener(id, window.pali._listeners[id], {
    passive: true,
  });

  // Register the origin of the listening site.
  window.postMessage(
    {
      id,
      type: 'PALI_EVENT_REG',
      data: {
        method,
        origin,
      },
    },
    '*'
  );
};

const removeListener = (method) => {
  let origin = window.location.hostname;
  if (window.location.port) {
    origin += `:${window.location.port}`;
  }

  const id = `${origin}.${method}`;

  if (window.pali._listeners[id]) {
    window.removeEventListener(id, window.pali._listeners[id]);

    delete window.pali._listeners[id];
  }

  window.postMessage(
    {
      id,
      type: 'PALI_EVENT_DEREG',
      data: {
        method,
        origin,
      },
    },
    '*'
  );
};

window.pali = Object.freeze({
  version: 2,
  request,
  on,
  removeListener,
  isConnected: () => request({ method: 'isConnected' }),
  enable: async () => {
    const response = await window.providerManager.enable();

    if (!response) throw ERRORS.USER_REJECTED;

    return response;
  },
  disable: async () => window.providerManager.disable(),
  _listeners: {},
});
