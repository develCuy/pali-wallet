/**
 * Sends a message to pali and add a listerner for the response
 */
const proxy = (type, data) =>
  new Promise((resolve, reject) => {
    const id = Date.now() + '.' + Math.random();

    window.addEventListener(
      id,
      (event) => {
        console.log('[Pali] EventListener method', data.method);
        if (event.detail === undefined) {
          resolve(undefined);

          return;
        } else if (event.detail === null) {
          resolve(null);

          return;
        }

        const response = JSON.parse(event.detail);
        if (response?.code === 4001 || response?.code === -32603) {
          reject(response);
          return;
        }
        if (response.error) {
          reject(new Error(response.error));

          return;
        }

        if (
          data.method === 'eth_requestAccounts' ||
          data.method === 'eth_accounts'
        ) {
          //TODO: enhance this implementation
          let addr = event.detail.replace('[', '');
          addr = addr.replace(']', '');
          addr = addr.replaceAll('"', '');
          window.ethereum.selectedAddress = addr;
        }
        resolve(response);

        return response;
      },
      {
        once: true,
        passive: true,
      }
    );
    window.postMessage(
      {
        id,
        type,
        data,
      },
      '*'
    );
  });

/**
 * Requests a method execution to pali
 * @param req is an object that contains `method` and maybe `args`
 * @returns the result of the method execution
 */
const request = async (req) => {
  const response = await proxy('METHOD_REQUEST', req);
  return response;
};
/**
 * Check if wallet is unlocked as metamask api exposes it
 */
const isUnlocked = () => {
  let host = window.location.host;
  const id = `${host}.isUnlocked`;
  window.postMessage(
    {
      id: id,
      type: 'IS_UNLOCKED',
    },
    '*'
  );
  return new Promise((resolve) => {
    window.addEventListener(id, (event) => {
      const response = JSON.parse(event.detail);
      resolve(response);
    });
  });
};

/**
 * Adds a listener to pali events
 * @see `DAppEvents`
 */
const on = (eventName, callback) => {
  let host = window.location.host;

  const id = `${host}.${eventName}`;

  window.pali._listeners[id] = ({ detail }) => {
    callback(JSON.parse(detail));
  };

  window.addEventListener(id, window.pali._listeners[id], {
    passive: true,
  });

  window.postMessage(
    {
      id: id,
      type: 'EVENT_REG',
      data: {
        eventName,
        host,
      },
    },
    '*'
  );
};

/**
 * Removes a listener from pali events
 * @see `DAppEvents`
 */
const removeListener = (eventName) => {
  let host = window.location.host;

  const id = `${host}.${eventName}`;

  if (window.pali._listeners[id]) {
    window.removeEventListener(id, window.pali._listeners[id]);

    delete window.pali._listeners[id];
  }

  window.postMessage(
    {
      id,
      type: 'EVENT_DEREG',
      data: {
        eventName,
        host,
      },
    },
    '*'
  );
};

window.pali = Object.freeze({
  version: 2,
  request,
  on,
  removeListener,
  isConnected: () => request({ method: 'wallet_isConnected' }),
  enable: () => proxy('ENABLE', { chain: 'syscoin', chainId: '0x39' }),
  disable: () => proxy('DISABLE'),
  _listeners: {},
});

window.ethereum = {
  isMetaMask: true, //Provisory just for make testing easier
  _metamask: {
    isUnlocked: () => isUnlocked(),
  },
  wallet: 'pali-v2',
  request,
  on,
  chainId: undefined,
  networkVersion: undefined,
  selectedAddress: null,
  removeListener,
  isConnected: () => request({ method: 'wallet_isConnected' }),
  enable: () => proxy('ENABLE', { chain: 'ethereum', chainId: '0x01' }),
  disable: () => proxy('DISABLE'),
  _listeners: {},
};
