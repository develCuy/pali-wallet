--- ./node_modules/wext-manifest-webpack-plugin/lib/plugin.js	2022-12-08 14:10:12.858000000 -0300
+++ ./node_modules/wext-manifest-webpack-plugin/lib/plugin.js	2023-05-10 14:30:52.269004100 -0300
@@ -1,56 +1,131 @@
-"use strict";
-/* eslint-disable import/no-extraneous-dependencies */
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.WextManifestWebpackPlugin = void 0;
-/**
- *  wext-manifest-webpack-plugin
- *
- *  @author   abhijithvijayan <abhijithvijayan.in>
- *  @license  MIT License
- */
-require("emoji-log");
-const PLUGIN_NAME = 'wext-manifest-webpack-plugin';
-function getEntryResource(module) {
-    const resource = null;
-    if (module && typeof module.resource === 'string') {
-        return module.resource;
-    }
-    return resource;
-}
-class WextManifestWebpackPlugin {
-    // Define `apply` as its prototype method which is supplied with compiler as its argument
-    apply(compiler) {
-        /**
-         *  webpack 4+ comes with a new plugin system.
-         *
-         *  (// ToDo: support old plugin system //)
-         */
-        const { hooks } = compiler;
-        // Check for hooks for 4+
-        if (hooks) {
-            // Runs plugin after a compilation has been created.
-            hooks.compilation.tap(PLUGIN_NAME, (compilation) => {
-                // Triggered when an asset from a chunk was added to the compilation.
-                compilation.hooks.chunkAsset.tap(PLUGIN_NAME, (chunk, file) => {
-                    // Only handle js files with entry modules
-                    if (!file.endsWith('.js') || !chunk.hasEntryModule()) {
-                        return;
-                    }
-                    // Returns path containing name of asset
-                    const resource = getEntryResource(chunk.entryModule);
-                    const isManifest = (resource && /manifest\.json$/.test(resource)) || false;
-                    if (isManifest) {
-                        chunk.files = chunk.files.filter((f) => {
-                            return f !== file;
-                        });
-                        delete compilation.assets[file];
-                        // https://github.com/abhijithvijayan/wext-manifest-webpack-plugin/issues/1
-                        // console.emoji('ðŸ¦„', `${PLUGIN_NAME}: removed ${file}`, 29);
-                        console.log(`${PLUGIN_NAME}: removed ${file}`);
-                    }
-                });
-            });
-        }
-    }
-}
-exports.WextManifestWebpackPlugin = WextManifestWebpackPlugin;
+"use strict";
+/* eslint-disable import/no-extraneous-dependencies */
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.WextManifestWebpackPlugin = void 0;
+/**
+ *  wext-manifest-webpack-plugin
+ *
+ *  @author   abhijithvijayan <abhijithvijayan.in>
+ *  @license  MIT License
+ */
+
+const defaultOptions = {
+    extensions: ["css", "scss", "sass", "less", "styl"],
+    scriptExtensions: ["js", "mjs"],
+    ignore: undefined,
+};
+
+require("emoji-log");
+const PLUGIN_NAME = 'wext-manifest-webpack-plugin';
+
+class WextManifestWebpackPlugin {
+    constructor(options) {
+        this.apply = this.apply.bind(this);
+        this.options = Object.assign({}, defaultOptions, options);
+      }
+    // Define `apply` as its prototype method which is supplied with compiler as its argument
+    apply(compiler) {
+        const extensionsWithoutDots = this.options.extensions.map(e =>
+            e[0] === "." ? e.substring(1) : e
+        );
+    
+        const patternOneOfExtensions = extensionsWithoutDots
+            .map(ext => escapeRegExp(ext))
+            .join("|");
+    
+        const resourcesRegex = new RegExp(
+            `[.](${patternOneOfExtensions})([?].*)?$`
+        );
+        /**
+         *  webpack 4+ comes with a new plugin system.
+         *
+         *  (// ToDo: support old plugin system //)
+         */
+        const { hooks } = compiler;
+        // Check for hooks for 4+
+        if (hooks) {
+            // Runs plugin after a compilation has been created.
+            hooks.compilation.tap(PLUGIN_NAME, (compilation) => {
+                const resourcesCache = [];
+                // Triggered when an asset from a chunk was added to the compilation.
+                compilation.hooks.chunkAsset.tap(PLUGIN_NAME, (chunk, file) => {
+               
+                    // Only handle js files with entry modules
+                    let isNotScript = defaultOptions.scriptExtensions.every((ext) => file.lastIndexOf('.' + ext) < 0)
+                    if(isNotScript) return
+                    
+                     // has entry modules
+                    if (compilation.chunkGraph.getNumberOfEntryModules(chunk) < 1) return;
+                    const entryModules = Array.from(compilation.chunkGraph.getChunkEntryModulesIterable(chunk));
+                    if (entryModules.length < 1) return;
+
+                    const entryModule = entryModules[0];
+                    const rawResources = collectEntryResources(compilation, entryModule, resourcesCache);
+                    
+                    // Returns path containing name of asset
+                    const resources = defaultOptions.ignore ? 
+                    rawResources.filter(r => !r.match(this.options.ignore))
+                    : rawResources;
+
+                    const isManifest =  resources.length &&
+                    resources.every(resource => resourcesRegex.test(resource) || /manifest\.json$/.test(resource));
+                    
+                    if (isManifest) {
+                        chunk.files.delete(file)
+                 
+                        delete compilation.assets[file];
+                        // https://github.com/abhijithvijayan/wext-manifest-webpack-plugin/issues/1
+                        // console.emoji('ðŸ¦„', `${PLUGIN_NAME}: removed ${file}`, 29);
+                        console.log(`${PLUGIN_NAME}: removed ${file}`);
+                    }
+                });
+            });
+        }
+    }
+}
+function collectEntryResources(compilation, module, cache) {
+    const index = compilation.moduleGraph.getPreOrderIndex(module);
+  
+    // index of module is unique per compilation
+    // module.id can be null, not used here
+    if (cache[index] !== undefined) {
+      return cache[index];
+    }
+  
+    if (typeof module.resource == "string") {
+      const resources = [module.resource];
+      cache[index] = resources;
+      return resources;
+    }
+  
+    const resources = [];
+    if (module.dependencies) {
+      const hasModuleGraphSupport = compilation.hasOwnProperty('moduleGraph');
+      module.dependencies.forEach(dep => {
+        if(dep) {
+          const module = hasModuleGraphSupport ? compilation.moduleGraph.getModule(dep) : dep.module;
+          const originModule = hasModuleGraphSupport ? compilation.moduleGraph.getParentModule(dep) : dep.originModule;
+          const nextModule = module || originModule;
+          if (nextModule) {
+            const depResources = collectEntryResources(compilation, nextModule, cache);
+            for (let index = 0, length = depResources.length; index !== length; index++) {
+              resources.push(depResources[index]);
+            }
+          }
+        }
+      });
+    }
+  
+    cache[index] = resources;
+    return resources;
+}
+
+const reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
+const reHasRegExpChar = RegExp(reRegExpChar.source);
+function escapeRegExp(string) {
+  string = String(string);
+  return string && reHasRegExpChar.test(string)
+      ? string.replace(reRegExpChar, "\\$&")
+      : string;
+}
+exports.WextManifestWebpackPlugin = WextManifestWebpackPlugin;
